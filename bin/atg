#!/usr/bin/env python3

import argparse
import os
import sys
# ensure that PYTHONPATH includes the atg directory
sys.path.insert(0, os.path.join(os.path.dirname(__file__), os.pardir))
import atg.quantification.coverage
import atg.ucsc.track


def make_hub(namespace):
    hub = atg.ucsc.track.HubBuilder(namespace.config)
    hub.make_output_structure(overwrite=True)
    hub.write_files()


def setup_hub(namespace):
    print('hub:', namespace.name)
    print('genome:', namespace.genome)
    print('path:', namespace.path)
    print('library:', namespace.library)
    print('multitracks:')
    print('  - default:')

    for filename in namespace.file_list:
        trackname = os.path.splitext(os.path.basename(filename))[0]
        print('    - track:', trackname)
        print('      path:', filename)


def reorganize_hub(namespace):
    hub = atg.ucsc.track.TrackOrganizer(namespace.config)
    hub.write_track_db(namespace.output)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="command", help='commands')
    subparsers.required = True

    # Make hubs from scratch
    make_hub_parser = subparsers.add_parser('make', help='Generate a Hub from YAML file, including conversion of BAM'
                                                         'to bigWig.')
    make_hub_parser.add_argument('config', help="YAML configuration file")
    make_hub_parser.set_defaults(func=make_hub)

    # Generate a basic YAML file for describing data and output
    setup_hub_parser = subparsers.add_parser('setup', help="Generate a simple YAML configuration file for "
                                                           "Hub grouping. Outputs to stdout.")
    setup_hub_parser.add_argument('file_list', nargs='+', help="BAM files")
    setup_hub_parser.add_argument('-n', '--name', help="Hub name", default="DEFAULT")
    setup_hub_parser.add_argument('-g', '--genome', help="UCSC genome, e.g. hg38", default="GENOME")
    setup_hub_parser.add_argument('-p', '--path', help="Path for hub output", default="PATH")
    setup_hub_parser.add_argument('-l', '--library', help="Strand specificity of sequencing library",
                                  choices=['unstranded', 'rf'], default='rf')
    setup_hub_parser.set_defaults(func=setup_hub)

    # New organization of existing bigwig files
    reorganize_hub_parser = subparsers.add_parser('reorganize', help="Generate a new trackDb.txt file given a YAML "
                                                                     "configuration. Will not create tracks.")
    reorganize_hub_parser.add_argument('config', help="YAML configuration file")
    reorganize_hub_parser.add_argument('-o', '--output', help="output file", default="trackDb.txt")
    reorganize_hub_parser.set_defaults(func=reorganize_hub)

    args = parser.parse_args()
    args.func(args)
